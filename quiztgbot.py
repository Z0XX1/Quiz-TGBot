import asyncio
import json
import random
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = "7338909037:AAED7iP52s5ErSe0bFlhX3JIeNHWAdIrBqk"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ========== –§–£–ù–ö–¶–ò–ò ========== #

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
def load_questions(filename="questions.json"):
    with open(filename, encoding="utf-8") as f:
        return json.load(f)
    
QUESTIONS = load_questions()

user_sessions = {}

async def send_question(user_id: int):
    session = user_sessions.get(user_id)
    if session is None:
        return
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if session["current"] < len(session["questions"]):
        current_q = session["questions"][session["current"]]
        text = f"–í–æ–ø—Ä–æ—Å {session['current']+1}: {current_q['question']}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ | –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ–µ–º —Ä—è–¥—É
        buttons = [
            [InlineKeyboardButton(text=option, callback_data=f"quiz:{idx}")]
            for idx, option in enumerate(current_q["options"])
        ]
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ inline_keyboard
        kb = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=1)
        await bot.send_message(user_id, text, reply_markup=kb)
    else:
        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ | –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
        score = session["score"]
        total = len(session["questions"])
        await bot.send_message(user_id, f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}\nüìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats")
        user_sessions.pop(user_id)

@dp.callback_query(lambda c: c.data and c.data.startswith("quiz:"))
async def process_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    session = user_sessions.get(user_id)
    if session is None:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /quiz üòÖ")
        return
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ callback_data
        answer_idx = int(callback_query.data.split(":")[1])
    except (IndexError, ValueError):
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ü•≤")
        return

    current_q = session["questions"][session["current"]]
    correct = current_q["correct"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if answer_idx == correct:
        session["score"] += 1
        await callback_query.answer("üòá –í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.", show_alert=True)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_option = current_q["options"][correct]
        await callback_query.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}", show_alert=True)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    session["current"] += 1
    await send_question(user_id)

# ========== –ö–û–ú–ê–ù–î–´ ========== #

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø quiz-–±–æ—Ç –∏ –º–æ–≥—É —É—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. üéâ\n–ü–æ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏, —è –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–∏—Ö, –∞ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞. üìå\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /quiz üéÅ\n\n–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help üòâ")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö:\n\n1. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /quiz\n2. –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞, –±—É–¥–µ—Ç –≤—Å–µ–≥–æ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å—Å—è –ø–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–æ–ª—å–∫–æ 1 –∏–∑ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.\n3. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è.\n\n–ö—Å—Ç–∞—Ç–∏, –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—ë –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /stats")

# –ö–æ–º–∞–Ω–¥–∞ /quiz 
@dp.message(Command("quiz"))
async def start_quiz(message: types.Message):
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—å—à–µ 10 –±–µ—Ä—ë–º –≤—Å–µ –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω—ã–µ 10
    if len(QUESTIONS) >= 10:
        quiz_questions = random.sample(QUESTIONS, 10)
    else:
        quiz_questions = QUESTIONS.copy()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∫–æ–ª-–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    user_sessions[message.from_user.id] = {
         "questions": quiz_questions,
         "current": 0,
         "score": 0
    }
    await send_question(message.from_user.id)

# –ö–æ–º–∞–Ω–¥–∞ /stats (soon)

# –ö–æ–º–∞–Ω–¥–∞ /leaderboard (soon)

# ========== –ó–ê–ü–£–°–ö ========== #

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO) # –õ–æ–≥–∏
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω...")